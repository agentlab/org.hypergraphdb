package hgtest.storage.bje.DefaultBiIndexImpl;

import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;

import org.hypergraphdb.HGException;
import org.hypergraphdb.storage.bje.BJEConfig;
import org.hypergraphdb.storage.bje.DefaultBiIndexImpl;
import org.junit.Test;

public class DefaultBiIndexImpl_openTest extends DefaultBiIndexImplTestBasis
{
	@Test
	public void doesNotFail_whenIndexNameIsNull() throws Exception
	{
		mockStorage();
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				null, mockedStorage, transactionManager, keyConverter,
				valueConverter, comparator, null);
		// there is not exception here
		// just because (DB_NAME_PREFIX + name) becomes "hgstore_idx_null";
		indexImpl.open();

		closeDatabases(indexImpl);
	}

	@Test
	public void throwsException_whenStorageIsNull() throws Exception
	{
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				INDEX_NAME, null, transactionManager, keyConverter,
				valueConverter, comparator, null);

		below.expect(HGException.class);
		below.expectMessage("While attempting to open index ;sample_index': java.lang.NullPointerException");
		indexImpl.open();
	}

	@Test
	public void doesNotFail_whenTransactionManagerIsNull() throws Exception
	{
		mockStorage();
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				INDEX_NAME, mockedStorage, null, keyConverter, valueConverter,
				comparator, null);

		// no exception here, because transactionManager is not used
		// within open() method
		indexImpl.open();

		closeDatabases(indexImpl);
	}

	@Test
	public void doesNotFail_whenKeyConverterIsNull() throws Exception
	{
		mockStorage();
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, null,
				valueConverter, comparator, null);

		// no exception here, because keyConverter is not used
		// within open() method
		indexImpl.open();

		closeDatabases(indexImpl);
	}

	@Test
	public void valueConverterIsNull() throws Exception
	{
		mockStorage();
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, keyConverter,
				null, comparator, null);

		// no exception here, because valueConverter is not used
		// within open() method
		indexImpl.open();

		closeDatabases(indexImpl);
	}

	@Test
	public void comparatorIsNull() throws Exception
	{
		mockStorage();
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, keyConverter,
				valueConverter, comparator, null);

		// no exception here, because comparator is not used
		// within 'open()' method
		indexImpl.open();

		closeDatabases(indexImpl);
	}

	@Test
	public void wrapsUnderlyingException_withHypergraphException()
			throws Exception
	{
		expect(mockedStorage.getConfiguration()).andReturn(new BJEConfig());
		expect(mockedStorage.getBerkleyEnvironment()).andReturn(environment);
		expect(mockedStorage.getBerkleyEnvironment()).andThrow(
				new IllegalStateException());
		replay(mockedStorage);

		final DefaultBiIndexImpl<Integer, String> indexImpl = new DefaultBiIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, keyConverter,
				valueConverter, comparator, null);
		try
		{
			below.expect(HGException.class);
			below.expectMessage("While attempting to open index ;sample_index': java.lang.IllegalStateException");
			indexImpl.open();
		}
		finally
		{
			closeDatabases(indexImpl);
		}
	}
}
