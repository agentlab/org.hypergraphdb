package hgtest.storage.bje.DefaultIndexImpl;

import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;

import org.hypergraphdb.HGException;
import org.hypergraphdb.storage.bje.BJEConfig;
import org.hypergraphdb.storage.bje.DefaultIndexImpl;
import org.junit.Test;

public class DefaultIndexImpl_openTest extends DefaultIndexImplTestBasis
{
	@Test
	public void doesNotFail_whenIndexNameIsNull() throws Exception
	{
		mockStorage();
		replay(mockedStorage);

		final DefaultIndexImpl<Integer, String> indexImpl = new DefaultIndexImpl<>(
				null, mockedStorage, transactionManager, keyConverter,
				valueConverter, comparator, null);

		// no exception here
		// just because (DB_NAME_PREFIX + name) becomes "hgstore_idx_null";
		indexImpl.open();

		closeDatabase(indexImpl);
	}

	@Test
	public void doesNotFail_whenTransactionManagerIsNull() throws Exception
	{
		startupEnvironment();
		replay(mockedStorage);

		final DefaultIndexImpl<Integer, String> indexImpl = new DefaultIndexImpl<>(
				INDEX_NAME, mockedStorage, null, keyConverter, valueConverter,
				comparator, null);

		// no exception here
		closeDatabase(indexImpl);

		closeDatabase(indexImpl);
	}

	@Test
	public void doesNotFail_whenKeyConverterIsNull() throws Exception
	{
		startupEnvironment();
		mockStorage();
		replay(mockedStorage);

		final DefaultIndexImpl<Integer, String> indexImpl = new DefaultIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, null,
				valueConverter, comparator, null);

		// no exception here
		indexImpl.open();

		closeDatabase(indexImpl);
	}

	@Test
	public void doesNotFail_whenValueConverterIsNull() throws Exception
	{
		startupEnvironment();
		mockStorage();
		replay(mockedStorage);

		final DefaultIndexImpl<Integer, String> indexImpl = new DefaultIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, keyConverter,
				null, comparator, null);

		// no exception here
		indexImpl.open();

		closeDatabase(indexImpl);
	}

	@Test
	public void wrapsUnderlyingException_withHypergraphException()
			throws Exception
	{
		startupEnvironment();
		expect(mockedStorage.getConfiguration()).andReturn(new BJEConfig());
		expect(mockedStorage.getBerkleyEnvironment()).andThrow(
				new IllegalStateException(
						"This exception is thrown by fake storage."));
		replay(mockedStorage);

		final DefaultIndexImpl<Integer, String> indexImpl = new DefaultIndexImpl<>(
				INDEX_NAME, mockedStorage, transactionManager, keyConverter,
				valueConverter, comparator, null);

		below.expect(HGException.class);
		below.expectMessage("While attempting to open index ;sample_index': java.lang.IllegalStateException: This exception is thrown by fake storage.");
		indexImpl.open();
	}
}
